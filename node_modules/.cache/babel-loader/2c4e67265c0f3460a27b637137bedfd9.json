{"ast":null,"code":"function checkColumn(grid, oI, oK, i, k) {\n  let temp = 0;\n\n  if (i - 1 >= 0 && grid[i][k] === 0) {\n    checkColumn(grid, oI, oK, i - 1, k);\n  } else if (i + 1 < grid[i].length && grid[i][k] !== 0) {\n    temp = grid[i][k];\n    grid[i][k] = grid[oI][oK];\n    grid[oI][oK] = temp;\n    return grid;\n  }\n}\n\nexport default function liftZeros(grid) {\n  /**  takes in 2D array \n  *\tchecks any space that contains zero\n  *\tif zero is found fucntion to check\n  *\tcolumn for nonzero and brings nonzero\n  *\tdown to the end if found, lifting all\n  *\tzeros up to the to the topmost position.\n  */\n  let i = grid.length - 1;\n  const lengthK = grid[0].length;\n  let k = 0;\n\n  for (i; i >= 0; i -= 1) {\n    k = lengthK - 1;\n\n    for (k; k >= 0; k -= 1) {\n      if (grid[i][k] === 0) {\n        checkColumn(grid, i, k, i, k);\n      }\n    }\n  }\n\n  return grid;\n}","map":{"version":3,"sources":["/Users/Mick/blockgame/src/puzzleFunctions/lifZeros.js"],"names":["checkColumn","grid","oI","oK","i","k","temp","length","liftZeros","lengthK"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,CAAnC,EAAsCC,CAAtC,EAAwC;AAEvC,MAAIC,IAAI,GAAG,CAAX;;AACA,MAAIF,CAAC,GAAG,CAAJ,IAAS,CAAT,IAAcH,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,MAAe,CAAjC,EAAmC;AAClCL,IAAAA,WAAW,CAACC,IAAD,EAAOC,EAAP,EAAWC,EAAX,EAAeC,CAAC,GAAG,CAAnB,EAAsBC,CAAtB,CAAX;AACA,GAFD,MAEO,IAAID,CAAC,GAAG,CAAJ,GAAQH,IAAI,CAACG,CAAD,CAAJ,CAAQG,MAAhB,IAA0BN,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,MAAe,CAA7C,EAA+C;AACrDC,IAAAA,IAAI,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,CAAP;AACAJ,IAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACC,EAAD,CAAJ,CAASC,EAAT,CAAb;AACAF,IAAAA,IAAI,CAACC,EAAD,CAAJ,CAASC,EAAT,IAAeG,IAAf;AACA,WAAOL,IAAP;AACA;AACD;;AAED,eAAe,SAASO,SAAT,CAAmBP,IAAnB,EAAwB;AACtC;AACD;AACA;AACA;AACA;AACA;AACA;AAEC,MAAIG,CAAC,GAAGH,IAAI,CAACM,MAAL,GAAa,CAArB;AACA,QAAME,OAAO,GAAER,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAvB;AACA,MAAIF,CAAC,GAAG,CAAR;;AAEA,OAAKD,CAAL,EAAQA,CAAC,IAAI,CAAb,EAAiBA,CAAC,IAAI,CAAtB,EAAwB;AACvBC,IAAAA,CAAC,GAAGI,OAAO,GAAG,CAAd;;AACA,SAAKJ,CAAL,EAAQA,CAAC,IAAI,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAuB;AACtB,UAAIJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,MAAe,CAAnB,EAAqB;AACpBL,QAAAA,WAAW,CAACC,IAAD,EAAOG,CAAP,EAAUC,CAAV,EAAaD,CAAb,EAAgBC,CAAhB,CAAX;AACA;AACD;AACD;;AACD,SAAOJ,IAAP;AACA","sourcesContent":["function checkColumn(grid, oI, oK, i, k){\n\t\n\tlet temp = 0;\n\tif (i - 1 >= 0 && grid[i][k] === 0){\n\t\tcheckColumn(grid, oI, oK, i - 1, k);\n\t} else if (i + 1 < grid[i].length && grid[i][k] !== 0){\n\t\ttemp = grid[i][k];\n\t\tgrid[i][k] = grid[oI][oK];\n\t\tgrid[oI][oK] = temp;\n\t\treturn grid\n\t}\n}\n\nexport default function liftZeros(grid){\n\t/**  takes in 2D array \n\t*\tchecks any space that contains zero\n\t*\tif zero is found fucntion to check\n\t*\tcolumn for nonzero and brings nonzero\n\t*\tdown to the end if found, lifting all\n\t*\tzeros up to the to the topmost position.\n\t*/\n\n\tlet i = grid.length -1;\n\tconst lengthK= grid[0].length;\n\tlet k = 0;\n\n\tfor (i; i >= 0 ; i -= 1){\n\t\tk = lengthK - 1;\n\t\tfor (k; k >= 0; k -= 1){\n\t\t\tif (grid[i][k] === 0){\n\t\t\t\tcheckColumn(grid, i, k, i, k)\n\t\t\t}\n\t\t}\n\t}\n\treturn grid\n}"]},"metadata":{},"sourceType":"module"}