{"ast":null,"code":"var _jsxFileName = \"/Users/Mick/blockgame/src/components/gird.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Square from './square';\nimport colorArray from '../puzzleVariables/colorArray';\nimport createPuzzle from '../puzzleFunctions/createPuzzle';\nimport '../css/grid.css';\nimport removeIsland from '../puzzleFunctions/removeIsland'; // function handleClick(grid, r, c, selected){\n//     removeIsland(grid, r, c, selected, [])\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction fillPuzzle(puzzle) {\n  console.log(\"fill puzzle\", puzzle);\n  let squareArray = [];\n  const lengthI = puzzle.length;\n  const lengthK = puzzle[0].length;\n\n  function handleClick(grid, r, c, selected, listOfCords) {\n    puzzle = removeIsland(grid, r, c, selected, listOfCords);\n  }\n\n  for (let i = 0; i < lengthI; i += 1) {\n    for (let k = 0; k < lengthK; k += 1) {\n      squareArray.push( /*#__PURE__*/_jsxDEV(Square, {\n        puzzle: puzzle,\n        row: i,\n        col: k,\n        selection: puzzle[i][k],\n        clickResponse: handleClick,\n        color: colorArray[puzzle[i][k]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 30\n      }, this));\n    }\n  }\n\n  return squareArray;\n}\n\nexport default function Grid() {\n  _s();\n\n  let puzzle = createPuzzle();\n  const [gridPuzzle, setGridPuzzle] = useState(puzzle);\n  console.log(\"render puzzle\", puzzle);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gird\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: fillPuzzle(puzzle)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"MA0OZCYXzla01+re/Kizzh3f6iE=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/Mick/blockgame/src/components/gird.js"],"names":["useState","Square","colorArray","createPuzzle","removeIsland","fillPuzzle","puzzle","console","log","squareArray","lengthI","length","lengthK","handleClick","grid","r","c","selected","listOfCords","i","k","push","Grid","gridPuzzle","setGridPuzzle"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AAEA,OAAO,iBAAP;AACA,OAAOC,YAAP,MAAyB,iCAAzB,C,CAIA;AACA;AAEA;;;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA2B;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,MAA3B;AACA,MAAIG,WAAW,GAAG,EAAlB;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACK,MAAvB;AACA,QAAMC,OAAO,GAAGN,MAAM,CAAC,CAAD,CAAN,CAAUK,MAA1B;;AAEA,WAASE,WAAT,CAAqBC,IAArB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwD;AAEpDZ,IAAAA,MAAM,GAAGF,YAAY,CAACU,IAAD,EAAOC,CAAP,EAAUC,CAAV,EAAaC,QAAb,EAAuBC,WAAvB,CAArB;AACH;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAApB,EAA6BS,CAAC,IAAI,CAAlC,EAAoC;AAChC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAApB,EAA6BQ,CAAC,IAAI,CAAlC,EAAoC;AAChCX,MAAAA,WAAW,CAACY,IAAZ,eAAiB,QAAC,MAAD;AACb,QAAA,MAAM,EAAEf,MADK;AAEb,QAAA,GAAG,EAAEa,CAFQ;AAGb,QAAA,GAAG,EAAEC,CAHQ;AAIb,QAAA,SAAS,EAAEd,MAAM,CAACa,CAAD,CAAN,CAAUC,CAAV,CAJE;AAKb,QAAA,aAAa,EAAEP,WALF;AAMb,QAAA,KAAK,EAAEX,UAAU,CAACI,MAAM,CAACa,CAAD,CAAN,CAAUC,CAAV,CAAD;AANJ;AAAA;AAAA;AAAA;AAAA,cAAjB;AAOH;AACJ;;AACD,SAAOX,WAAP;AACH;;AAED,eAAe,SAASa,IAAT,GAAe;AAAA;;AAE1B,MAAIhB,MAAM,GAAGH,YAAY,EAAzB;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAACM,MAAD,CAA5C;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACCD,UAAU,CAACC,MAAD;AADX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAbuBgB,I;;KAAAA,I","sourcesContent":["import {useState} from 'react';\n\nimport Square from './square';\nimport colorArray from '../puzzleVariables/colorArray';\nimport createPuzzle from '../puzzleFunctions/createPuzzle';\n\nimport '../css/grid.css';\nimport removeIsland from '../puzzleFunctions/removeIsland';\n\n\n\n// function handleClick(grid, r, c, selected){\n//     removeIsland(grid, r, c, selected, [])\n\n// }\n\nfunction fillPuzzle(puzzle){\n    console.log(\"fill puzzle\", puzzle)\n    let squareArray = [];\n    const lengthI = puzzle.length;\n    const lengthK = puzzle[0].length;\n\n    function handleClick(grid, r, c, selected, listOfCords) {\n        \n        puzzle = removeIsland(grid, r, c, selected, listOfCords)\n    }\n\n    for (let i = 0; i < lengthI; i += 1){\n        for (let k = 0; k < lengthK; k += 1){\n            squareArray.push(<Square \n                puzzle={puzzle}\n                row={i}\n                col={k}\n                selection={puzzle[i][k]}\n                clickResponse={handleClick}\n                color={colorArray[puzzle[i][k]]} />)\n        }\n    }\n    return squareArray;\n}\n\nexport default function Grid(){\n    \n    let puzzle = createPuzzle();\n    const [gridPuzzle, setGridPuzzle] = useState(puzzle)\n\n    console.log(\"render puzzle\", puzzle)\n    return (\n        <div className=\"gird\">\n            <div className=\"flex-container\">\n            {fillPuzzle(puzzle)}\n            </div>\n        </div>    \n    )\n}"]},"metadata":{},"sourceType":"module"}