{"ast":null,"code":"var _jsxFileName = \"/Users/Mick/blockgame/src/components/gird.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Square from './square';\nimport colorArray from '../puzzleVariables/colorArray';\nimport createPuzzle from '../puzzleFunctions/createPuzzle';\nimport '../css/grid.css';\nimport removeIsland from '../puzzleFunctions/removeIsland'; // function handleClick(grid, r, c, selected){\n//     removeIsland(grid, r, c, selected, [])\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Grid() {\n  _s();\n\n  let puzzle = createPuzzle();\n  const [gridPuzzle, setGridPuzzle] = useState(puzzle);\n\n  function handleClick(grid, r, c, selected, listOfCords) {\n    console.log(\"handle click\");\n    let newGrid = removeIsland(grid, r, c, selected, listOfCords);\n    console.log(\"test\", removeIsland(grid, r, c, selected, listOfCords)); // setGridPuzzle(newGrid);\n  }\n\n  function fillPuzzle(puzzle) {\n    console.log(\"fill puzzle\", puzzle);\n    let squareArray = [];\n    const lengthI = puzzle.length;\n    const lengthK = puzzle[0].length;\n\n    for (let i = 0; i < lengthI; i += 1) {\n      for (let k = 0; k < lengthK; k += 1) {\n        squareArray.push( /*#__PURE__*/_jsxDEV(Square, {\n          puzzle: puzzle,\n          row: i,\n          col: k,\n          selection: puzzle[i][k],\n          clickResponse: handleClick,\n          color: colorArray[puzzle[i][k]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 34\n        }, this));\n      }\n    }\n\n    return squareArray;\n  }\n\n  console.log(\"render puzzle\", gridPuzzle);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: fillPuzzle(gridPuzzle)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"MA0OZCYXzla01+re/Kizzh3f6iE=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/Mick/blockgame/src/components/gird.js"],"names":["useState","Square","colorArray","createPuzzle","removeIsland","Grid","puzzle","gridPuzzle","setGridPuzzle","handleClick","grid","r","c","selected","listOfCords","console","log","newGrid","fillPuzzle","squareArray","lengthI","length","lengthK","i","k","push"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AAEA,OAAO,iBAAP;AACA,OAAOC,YAAP,MAAyB,iCAAzB,C,CAIA;AACA;AAEA;;;AAIA,eAAe,SAASC,IAAT,GAAe;AAAA;;AAE1B,MAAIC,MAAM,GAAGH,YAAY,EAAzB;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAACM,MAAD,CAA5C;;AAEA,WAASG,WAAT,CAAqBC,IAArB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwD;AACpDC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAIC,OAAO,GAAGb,YAAY,CAACM,IAAD,EAAOC,CAAP,EAAUC,CAAV,EAAaC,QAAb,EAAuBC,WAAvB,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBZ,YAAY,CAACM,IAAD,EAAOC,CAAP,EAAUC,CAAV,EAAaC,QAAb,EAAuBC,WAAvB,CAAhC,EAHoD,CAIpD;AACH;;AAED,WAASI,UAAT,CAAoBZ,MAApB,EAA2B;AACvBS,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BV,MAA3B;AACA,QAAIa,WAAW,GAAG,EAAlB;AACA,UAAMC,OAAO,GAAGd,MAAM,CAACe,MAAvB;AACA,UAAMC,OAAO,GAAGhB,MAAM,CAAC,CAAD,CAAN,CAAUe,MAA1B;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,IAAI,CAAlC,EAAoC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6BE,CAAC,IAAI,CAAlC,EAAoC;AAChCL,QAAAA,WAAW,CAACM,IAAZ,eAAiB,QAAC,MAAD;AACb,UAAA,MAAM,EAAEnB,MADK;AAEb,UAAA,GAAG,EAAEiB,CAFQ;AAGb,UAAA,GAAG,EAAEC,CAHQ;AAIb,UAAA,SAAS,EAAElB,MAAM,CAACiB,CAAD,CAAN,CAAUC,CAAV,CAJE;AAKb,UAAA,aAAa,EAAEf,WALF;AAMb,UAAA,KAAK,EAAEP,UAAU,CAACI,MAAM,CAACiB,CAAD,CAAN,CAAUC,CAAV,CAAD;AANJ;AAAA;AAAA;AAAA;AAAA,gBAAjB;AAOH;AACJ;;AACD,WAAOL,WAAP;AACH;;AAEDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,UAA7B;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACCW,UAAU,CAACX,UAAD;AADX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAxCuBF,I;;KAAAA,I","sourcesContent":["import {useState} from 'react';\n\nimport Square from './square';\nimport colorArray from '../puzzleVariables/colorArray';\nimport createPuzzle from '../puzzleFunctions/createPuzzle';\n\nimport '../css/grid.css';\nimport removeIsland from '../puzzleFunctions/removeIsland';\n\n\n\n// function handleClick(grid, r, c, selected){\n//     removeIsland(grid, r, c, selected, [])\n\n// }\n\n\n\nexport default function Grid(){\n\n    let puzzle = createPuzzle();\n    const [gridPuzzle, setGridPuzzle] = useState(puzzle)\n\n    function handleClick(grid, r, c, selected, listOfCords) {\n        console.log(\"handle click\"); \n        let newGrid = removeIsland(grid, r, c, selected, listOfCords)\n        console.log(\"test\", removeIsland(grid, r, c, selected, listOfCords))\n        // setGridPuzzle(newGrid);\n    }\n\n    function fillPuzzle(puzzle){\n        console.log(\"fill puzzle\", puzzle)\n        let squareArray = [];\n        const lengthI = puzzle.length;\n        const lengthK = puzzle[0].length;\n\n        for (let i = 0; i < lengthI; i += 1){\n            for (let k = 0; k < lengthK; k += 1){\n                squareArray.push(<Square \n                    puzzle={puzzle}\n                    row={i}\n                    col={k}\n                    selection={puzzle[i][k]}\n                    clickResponse={handleClick}\n                    color={colorArray[puzzle[i][k]]} />)\n            }\n        }\n        return squareArray;\n    }\n\n    console.log(\"render puzzle\", gridPuzzle)\n    return (\n        <div className=\"grid\">\n            <div className=\"flex-container\">\n            {fillPuzzle(gridPuzzle)}\n            </div>\n        </div>    \n    )\n}"]},"metadata":{},"sourceType":"module"}