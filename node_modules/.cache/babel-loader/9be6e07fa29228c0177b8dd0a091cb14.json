{"ast":null,"code":"var _jsxFileName = \"/Users/Mick/blockgame/src/components/gird.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './square';\nimport colorArray from '../puzzleVariables/colorArray';\nimport createPuzzle from '../puzzleFunctions/createPuzzle';\nimport '../css/grid.css';\nimport removeIsland from '../puzzleFunctions/removeIsland';\nimport liftZeros from '../puzzleFunctions/lifZeros';\nimport replaceZeros from '../puzzleFunctions/replaceZeros'; // function handleClick(grid, r, c, selected){\n//     removeIsland(grid, r, c, selected, [])\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Grid() {\n  _s();\n\n  let puzzle = createPuzzle();\n  const [gridPuzzle, setGridPuzzle] = useState(puzzle);\n  const [score, setScore] = useState(0);\n  const [moves, setMoves] = useState(25);\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleClick = (grid, r, c, selected, listOfCords) => {\n    let newGrid = [...grid];\n    let points = removeIsland(newGrid, r, c, selected, listOfCords);\n    if (moves === 0) setGameOver(true);\n    if (score >= 2995) setGameOver(true);\n    setMoves(moves - 1);\n\n    if (points >= 3 && points < 5) {\n      points = points * 2;\n    } else if (points === 5) {\n      points = points * 3;\n    } else if (points > 5) {\n      points = points * 10;\n    }\n\n    setScore(score + 5 * points);\n    liftZeros(newGrid);\n    replaceZeros(newGrid);\n    setGridPuzzle(newGrid);\n  };\n\n  const fillPuzzle = puzzle => {\n    let squareArray = [];\n    const lengthI = puzzle.length;\n    const lengthK = puzzle[0].length;\n\n    for (let i = 0; i < lengthI; i += 1) {\n      for (let k = 0; k < lengthK; k += 1) {\n        squareArray.push( /*#__PURE__*/_jsxDEV(Square, {\n          puzzle: puzzle,\n          row: i,\n          col: k,\n          selection: puzzle[i][k],\n          clickResponse: handleClick,\n          color: colorArray[puzzle[i][k]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 34\n        }, this));\n      }\n    }\n\n    return squareArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [!gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 31\n      }, this), score >= 3000 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" You Did it!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 35\n      }, this), moves <= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Game Over. Better Luck Next time.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 32\n      }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-container\",\n      children: fillPuzzle(gridPuzzle)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"tEcRi22VrNxh/gBBVAzWNjPArkE=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/Mick/blockgame/src/components/gird.js"],"names":["React","useState","Square","colorArray","createPuzzle","removeIsland","liftZeros","replaceZeros","Grid","puzzle","gridPuzzle","setGridPuzzle","score","setScore","moves","setMoves","gameOver","setGameOver","handleClick","grid","r","c","selected","listOfCords","newGrid","points","fillPuzzle","squareArray","lengthI","length","lengthK","i","k","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Square from './square';\nimport colorArray from '../puzzleVariables/colorArray';\nimport createPuzzle from '../puzzleFunctions/createPuzzle';\n\nimport '../css/grid.css';\nimport removeIsland from '../puzzleFunctions/removeIsland';\nimport liftZeros from '../puzzleFunctions/lifZeros';\nimport replaceZeros from '../puzzleFunctions/replaceZeros';\n\n\n\n// function handleClick(grid, r, c, selected){\n//     removeIsland(grid, r, c, selected, [])\n\n// }\n\n\n\nexport default function Grid(){\n\n    let puzzle = createPuzzle();\n    const [gridPuzzle, setGridPuzzle] = useState(puzzle);\n    const [score, setScore] = useState(0);\n    const [moves, setMoves] = useState(25);\n    const [gameOver, setGameOver] = useState(false);\n  \n    const handleClick = (grid, r, c, selected, listOfCords) => { \n        let newGrid = [...grid];\n        let points = removeIsland(newGrid, r, c, selected, listOfCords)\n\n        if (moves === 0)\n            setGameOver(true);\n        if (score >= 2995)\n            setGameOver(true);\n\n        setMoves(moves - 1);\n\n       \n\n        if (points >= 3 && points < 5){\n            points = points * 2;\n        } else if (points === 5){\n            points = points * 3;\n        } else if (points > 5){\n            points = points * 10;\n        }\n\n        setScore(score + (5 * points));\n        liftZeros(newGrid);\n        replaceZeros(newGrid);\n        setGridPuzzle(newGrid);\n\n    }\n\n    const fillPuzzle = (puzzle) => {\n\n        let squareArray = [];\n        const lengthI = puzzle.length;\n        const lengthK = puzzle[0].length;\n\n        for (let i = 0; i < lengthI; i += 1){\n            for (let k = 0; k < lengthK; k += 1){\n                squareArray.push(<Square \n                    puzzle={puzzle}\n                    row={i}\n                    col={k}\n                    selection={puzzle[i][k]}\n                    clickResponse={handleClick}\n                    color={colorArray[puzzle[i][k]]} />)\n            }\n        }\n        return squareArray;\n    }\n\n    return (\n        <div className=\"grid\">\n            <div className=\"info\">\n                {!gameOver && <div>{score}</div> }\n                {score >= 3000 && <div> You Did it!!</div>}\n                {moves <= 0 && <div>Game Over. Better Luck Next time.</div>}\n                {!gameOver && <div>{moves}</div> }\n                \n                </div>\n            <div className=\"puzzle-container\">\n            {fillPuzzle(gridPuzzle)}\n            </div>\n        </div>    \n    )\n}"]},"metadata":{},"sourceType":"module"}